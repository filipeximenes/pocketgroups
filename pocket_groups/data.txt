{u'status': 1, u'item': {u'content_length': u'10319', u'resolved_url': u'http://www.danosse.com/', u'videos': [], u'encoding': u'utf-8', u'is_article': u'0', u'excerpt': u'O cara simplesmente inventou de vestir uma roupa de ladr\xe3o e fingir que estava assaltando o apartamento da namorada. Coitado, quero nem ver o cartigo que ela deu a ele durante o m\xeas todo!', u'word_count': u'387', u'used_fallback': u'1', u'normal_url': u'http://danosse.com', u'images': {u'1': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_sushi_de_Kitut.jpg', u'credit': u'', u'height': u'426', u'image_id': u'1', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'3': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_sniper.jpg', u'credit': u'', u'height': u'381', u'image_id': u'3', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'2': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_janela_de_fumante_preguicoso.jpg', u'credit': u'', u'height': u'421', u'image_id': u'2', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'5': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_oceano_G.jpg', u'credit': u'', u'height': u'380', u'image_id': u'5', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'4': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_fim_activia.jpg', u'credit': u'', u'height': u'548', u'image_id': u'4', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'7': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120426_banner_gustavomendes.jpg', u'credit': u'', u'height': u'280', u'image_id': u'7', u'item_id': u'1523548', u'caption': u'', u'width': u'222'}, u'6': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_caixapreta.jpg', u'credit': u'', u'height': u'100', u'image_id': u'6', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'8': {u'src': u'http://www.danosse.com/wp-content/themes/danosse/images/danosse-livre-header.jpg', u'credit': u'', u'height': u'0', u'image_id': u'8', u'item_id': u'1523548', u'caption': u'', u'width': u'0'}}, u'domain_id': u'16681', u'title': u'Danosse.COM \u2013 Baixando sua produtividade!', u'login_required': u'0', u'has_video': u'0', u'mime_type': u'text/html', u'innerdomain_redirect': u'0', u'date_published': u'2012-04-29 00:00:00', u'date_resolved': u'2012-04-29 21:23:16', u'authors': [], u'item_id': u'1523548', u'resolved_id': u'1523548', u'given_url': u'http://www.danosse.com/', u'is_index': u'1', u'resolved_normal_url': u'http://danosse.com', u'response_code': u'200', u'origin_domain_id': u'16681', u'extended_item_id': u'1523548', u'has_image': u'1'}}























































{u'status': 1, u'since': 1390973427, u'list': {u'20789643': {u'is_article': u'0', u'image': {u'item_id': u'20789643', u'src': u'http://www.rdio.com/media/marketing/images/home/press/person.png', u'height': u'0', u'width': u'0'}, u'excerpt': u'', u'word_count': u'0', u'images': {u'1': {u'src': u'http://www.rdio.com/media/marketing/images/home/press/person.png', u'credit': u'', u'height': u'0', u'image_id': u'1', u'item_id': u'20789643', u'caption': u'', u'width': u'0'}}, u'has_video': u'0', u'time_added': u'1390972737', u'status': u'0', u'tags': {u'testing': {u'item_id': u'20789643', u'tag': u'testing'}, u'filipeximenes': {u'item_id': u'20789643', u'tag': u'filipeximenes'}}, u'sort_id': 1, u'resolved_url': u'http://www.rdio.com/', u'item_id': u'20789643', u'resolved_id': u'20789643', u'given_url': u'http://www.rdio.com/', u'resolved_title': u'', u'is_index': u'1', u'time_updated': u'1390972737', u'time_favorited': u'0', u'time_read': u'0', u'favorite': u'0', u'given_title': u'', u'has_image': u'0'}, u'1523548': {u'is_article': u'0', u'image': {u'item_id': u'1523548', u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_sushi_de_Kitut.jpg', u'height': u'426', u'width': u'500'}, u'excerpt': u'O cara simplesmente inventou de vestir uma roupa de ladr\xe3o e fingir que estava assaltando o apartamento da namorada. Coitado, quero nem ver o cartigo que ela deu a ele durante o m\xeas todo!', u'word_count': u'387', u'images': {u'1': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_sushi_de_Kitut.jpg', u'credit': u'', u'height': u'426', u'image_id': u'1', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'3': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_sniper.jpg', u'credit': u'', u'height': u'381', u'image_id': u'3', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'2': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_janela_de_fumante_preguicoso.jpg', u'credit': u'', u'height': u'421', u'image_id': u'2', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'5': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_oceano_G.jpg', u'credit': u'', u'height': u'380', u'image_id': u'5', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'4': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_fim_activia.jpg', u'credit': u'', u'height': u'548', u'image_id': u'4', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'7': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120426_banner_gustavomendes.jpg', u'credit': u'', u'height': u'280', u'image_id': u'7', u'item_id': u'1523548', u'caption': u'', u'width': u'222'}, u'6': {u'src': u'http://www.danosse.com/wp-content/uploads/2012/120429_caixapreta.jpg', u'credit': u'', u'height': u'100', u'image_id': u'6', u'item_id': u'1523548', u'caption': u'', u'width': u'500'}, u'8': {u'src': u'http://www.danosse.com/wp-content/themes/danosse/images/danosse-livre-header.jpg', u'credit': u'', u'height': u'0', u'image_id': u'8', u'item_id': u'1523548', u'caption': u'', u'width': u'0'}}, u'has_video': u'0', u'time_added': u'1390972737', u'status': u'0', u'tags': {u'testing': {u'item_id': u'1523548', u'tag': u'testing'}, u'filipeximenes': {u'item_id': u'1523548', u'tag': u'filipeximenes'}}, u'sort_id': 0, u'resolved_url': u'http://www.danosse.com/', u'item_id': u'1523548', u'resolved_id': u'1523548', u'given_url': u'http://www.danosse.com/', u'resolved_title': u'Danosse.COM \u2013 Baixando sua produtividade!', u'is_index': u'1', u'time_updated': u'1390972737', u'time_favorited': u'0', u'time_read': u'0', u'favorite': u'0', u'given_title': u'', u'has_image': u'1'}}, u'complete': 0}














































{u'status': 1, u'since': 1390966970, u'list': 


{u'234940016': {u'status': u'1', u'is_index': u'0', u'sort_id': 25, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390174863', u'excerpt': u'Authored by:  Duration: 2h 59m Level: Intermediate Released:  Features: Course Rating: You are currently not signed in. Please sign in to access subscriber-only content.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'24', u'given_title': u'REST Fundamentals - Online Training Course for Developers', u'resolved_url': u'http://pluralsight.com/training/Courses/TableOfContents/rest-fundamentals', u'is_article': u'1', u'item_id': u'234940016', u'time_added': u'1385824223', u'resolved_id': u'234940016', u'given_url': u'http://pluralsight.com/training/Courses/TableOfContents/rest-fundamentals', u'resolved_title': u'REST Fundamentals'}, 


u'9671833': {u'status': u'0', u'is_index': u'0', u'sort_id': 50, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u"Cool URIs don't change What makes a cool URI? A cool URI is one which does not change. What sorts of URI change?URIs don't change: people change them. There are no reasons at all in theory for people to change URIs (or stop maintaining documents), but millions of reasons in practice.", u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'3018', u'given_title': u"Hypertext Style: Cool URIs don't change.", u'resolved_url': u'http://www.w3.org/Provider/Style/URI.html', u'is_article': u'0', u'item_id': u'9671833', u'time_added': u'1389839793', u'resolved_id': u'9671833', u'given_url': u'http://www.w3.org/Provider/Style/URI.html', u'resolved_title': u"Cool URIs don't change"}, u'180352647': {u'status': u'1', u'is_index': u'0', u'sort_id': 14, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386209636', u'excerpt': u'This post is about URI naming.\xa0 Designing URI names.\xa0 Some tips and rules and conventions that you can follow when figuring out your application\u2019s URIs.\xa0 The focus is on URIs for \u2018REST-ful\u2019 applications.\xa0 But many of the tips apply to any kind of website or application.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'5690', u'given_title': u'REST-ful URI design | 2PartsMagic Blog', u'resolved_url': u'http://blog.2partsmagic.com/restful-uri-design/', u'is_article': u'1', u'item_id': u'180352647', u'time_added': u'1385220890', u'resolved_id': u'180352647', u'given_url': u'http://blog.2partsmagic.com/restful-uri-design/', u'resolved_title': u'REST-ful URI design'}, u'206139013': {u'status': u'1', u'is_index': u'0', u'sort_id': 66, u'time_updated': u'1390883965', u'time_favorited': u'1390533282', u'time_read': u'1390533285', u'excerpt': u'One of the most interesting projects I\u2019ve been working on lately has a REST-based service at the core.\xa0 I\u2019ve done REST-based services (implemented in .NET) in the past, but not at the level of this project.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'2290', u'given_title': u'', u'resolved_url': u'http://dinogambone.com/2012/things-you-can-do-in-your-rest-based-services-you-didnt-know/', u'is_article': u'1', u'item_id': u'206139013', u'time_added': u'1390364945', u'resolved_id': u'206139013', u'given_url': u'http://dinogambone.com/2012/things-you-can-do-in-your-rest-based-services-you-didnt-know/', u'resolved_title': u"Things you can do in your REST-based services you didn\u2019t know \u2013 Dino Gambone's Blog"}, u'173850': {u'status': u'1', u'is_index': u'0', u'sort_id': 65, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390362861', u'excerpt': u'Service-oriented architecture (SOA) is a software design and software architecture design pattern based on discrete pieces of software providing application functionality as services to other applications. This is known as Service-orientation. It is independent of any vendor, product or technology.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'6237', u'given_title': u'', u'resolved_url': u'http://en.wikipedia.org/wiki/Service-oriented_architecture', u'is_article': u'1', u'item_id': u'173850', u'time_added': u'1390355938', u'resolved_id': u'173850', u'given_url': u'http://en.wikipedia.org/wiki/Service-oriented_architecture', u'resolved_title': u'Service-oriented architecture'}, u'383520190': {u'status': u'1', u'is_index': u'0', u'sort_id': 55, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390136690', u'excerpt': u'There\u2019s been a lot of interest in and effort expended upon \u201chypermedia APIs\u201d recently. However, I see a fair amount of resistance to it from developers and ops folks, because the pragmatic benefits aren\u2019t often clear.\xa0  The trick, is that those benefits are often subtle and situational.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1154', u'given_title': u'mnot\u2019s blog: Five Reasons to Considering Linking in Your HTTP APIs', u'resolved_url': u'http://www.mnot.net/blog/2013/06/23/linking_apis', u'is_article': u'1', u'item_id': u'383520190', u'time_added': u'1390057729', u'resolved_id': u'383520190', u'given_url': u'http://www.mnot.net/blog/2013/06/23/linking_apis', u'resolved_title': u'Five Reasons to Considering Linking in Your HTTP APIs'}, u'525030887': {u'status': u'1', u'is_index': u'0', u'sort_id': 52, u'time_updated': u'1390883966', u'time_favorited': u'1390445162', u'time_read': u'1390445164', u'excerpt': u'Now the latest discussion about the benefits of hypermedia (see http://soabits.blogspot.no/2013/12/selling-benefits-of-hypermedia.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1102', u'given_title': u'SOA Bits and Ramblings: Media types for APIs', u'resolved_url': u'http://soabits.blogspot.no/2013/12/media-types-for-apis.html', u'is_article': u'1', u'item_id': u'525030887', u'time_added': u'1389899406', u'resolved_id': u'525030887', u'given_url': u'http://soabits.blogspot.no/2013/12/media-types-for-apis.html', u'resolved_title': u'Media types for APIs'}, u'1638804': {u'status': u'1', u'is_index': u'0', u'sort_id': 61, u'time_updated': u'1390883965', u'time_favorited': u'1390308106', u'time_read': u'1390308207', u'excerpt': u'Managing changes to APIs is hard. That is no surprise to anyone who has ever maintained an API of any sort. Web services, being a special case of API, are susceptible to many of the difficulties around versioning as other types of APIs.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'842', u'given_title': u'', u'resolved_url': u'http://barelyenough.org/blog/2008/05/versioning-rest-web-services/', u'is_article': u'1', u'item_id': u'1638804', u'time_added': u'1390307723', u'resolved_id': u'1638804', u'given_url': u'http://barelyenough.org/blog/2008/05/versioning-rest-web-services/', u'resolved_title': u'Versioning REST Web Services'}, u'1483901': {u'status': u'1', u'is_index': u'0', u'sort_id': 3, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1384611096', u'excerpt': u'We are used to building distributed systems on top of large middleware platforms like those implementing CORBA, the Web Services protocols stack, J2EE, etc.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'6487', u'given_title': u'How to GET a Cup of Coffee', u'resolved_url': u'http://www.infoq.com/articles/webber-rest-workflow', u'is_article': u'1', u'item_id': u'1483901', u'time_added': u'1383018935', u'resolved_id': u'1483901', u'given_url': u'http://www.infoq.com/articles/webber-rest-workflow', u'resolved_title': u'How to GET a Cup of Coffee'}, u'501575499': {u'status': u'1', u'is_index': u'0', u'sort_id': 38, u'time_updated': u'1390883966', u'time_favorited': u'0', u'time_read': u'1388672816', u'excerpt': u'Creating API mashups has matured alongside the explosive growth of open APIs to create a new type of service: the API aggregation business. These innovative businesses combine APIs from multiple providers to build new products and services.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1827', u'given_title': u'API Aggregation: Why It Matters and Eight Different Models', u'resolved_url': u'http://blog.programmableweb.com/2013/12/13/api-aggregation-why-it-matters-and-eight-different-models/', u'is_article': u'1', u'item_id': u'501575499', u'time_added': u'1387257383', u'resolved_id': u'501575499', u'given_url': u'http://blog.programmableweb.com/2013/12/13/api-aggregation-why-it-matters-and-eight-different-models/', u'resolved_title': u'API Aggregation: Why It Matters and Eight Different Models'}, u'347496884': {u'status': u'1', u'is_index': u'0', u'sort_id': 44, u'time_updated': u'1390883965', u'time_favorited': u'1389836633', u'time_read': u'1389836633', u'excerpt': u'Avoid hackable URLs if you are building a HATEOAS API.  This is a lesson about REST API design that I learned while building non-trivial REST APIs. If you provide a full-on level 3 REST API, consider avoiding hackable URLs.', u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1001', u'given_title': u'REST lesson learned: Avoid hackable URLs', u'resolved_url': u'http://blog.ploeh.dk/2013/05/01/rest-lesson-learned-avoid-hackable-urls/', u'is_article': u'1', u'item_id': u'347496884', u'time_added': u'1389787411', u'resolved_id': u'347496884', u'given_url': u'http://blog.ploeh.dk/2013/05/01/rest-lesson-learned-avoid-hackable-urls/', u'resolved_title': u'REST lesson learned: Avoid hackable URLs by Mark Seemann'}, u'55226942': {u'status': u'1', u'is_index': u'0', u'sort_id': 32, u'time_updated': u'1390883965', u'time_favorited': u'1390359350', u'time_read': u'1390359355', u'excerpt': u'Hypertext Transfer Protocol (HTTP) is the life of the web. It\u2019s used every time you transfer a document, or make an AJAX request. But HTTP is surprisingly a relative unknown among some web developers.', u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'3538', u'given_title': u'', u'resolved_url': u'http://net.tutsplus.com/tutorials/other/a-beginners-introduction-to-http-and-rest/', u'is_article': u'1', u'item_id': u'55226942', u'time_added': u'1386424916', u'resolved_id': u'55226942', u'given_url': u'http://net.tutsplus.com/tutorials/other/a-beginners-introduction-to-http-and-rest/', u'resolved_title': u'A Beginner\u2019s Guide to HTTP and REST'}, u'268210745': {u'status': u'1', u'is_index': u'0', u'sort_id': 13, u'time_updated': u'1390883965', u'time_favorited': u'1386171045', u'time_read': u'1386171047', u'excerpt': u'To read a customer with Customer ID# 33245:GET http://www.example.com/customers/33245 The same URI would be used for PUT and DELETE, to update and delete, respectively.  Here are proposed URIs for products:POST http://www.example.com/products for creating a new product.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1161', u'given_title': u'RESTful Resource Naming', u'resolved_url': u'http://www.restapitutorial.com/lessons/restfulresourcenaming.html', u'is_article': u'1', u'item_id': u'268210745', u'time_added': u'1385220773', u'resolved_id': u'268210745', u'given_url': u'http://www.restapitutorial.com/lessons/restfulresourcenaming.html', u'resolved_title': u'Resource Naming'}, u'102171741': {u'status': u'1', u'is_index': u'0', u'sort_id': 31, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390355972', u'excerpt': u'Representational state transfer (REST) is an architectural style consisting of a coordinated set of constraints applied to components, connectors, and data elements, within a distributed hypermedia system.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'2693', u'given_title': u'', u'resolved_url': u'http://en.wikipedia.org/wiki/Representational_state_transfer', u'is_article': u'1', u'item_id': u'102171741', u'time_added': u'1386424881', u'resolved_id': u'102171741', u'given_url': u'http://en.wikipedia.org/wiki/Representational_state_transfer', u'resolved_title': u'Representational state transfer'}, u'118764906': {u'status': u'1', u'is_index': u'0', u'sort_id': 58, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390137652', u'excerpt': u'To be a full-fledged format on the Web, you need to support links -- something sorely missing in JSON, which many have noticed lately.  In fact, too many; everybody seems to be piling on with their own take on how a link should look in JSON.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1324', u'given_title': u'', u'resolved_url': u'http://www.mnot.net/blog/2011/11/25/linking_in_json', u'is_article': u'1', u'item_id': u'118764906', u'time_added': u'1390136647', u'resolved_id': u'118764906', u'given_url': u'http://www.mnot.net/blog/2011/11/25/linking_in_json', u'resolved_title': u'mnot\u2019s blog'}, u'534183548': {u'status': u'0', u'is_index': u'0', u'sort_id': 70, u'time_updated': u'1390966585', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'Representational State Transfer (REST) is an architectural style that I developed while improving the core Web protocols (URI, HTTP, and HTML) and leading them through the IETF standardization ...', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'210', u'given_title': u'A little REST and Relaxation', u'resolved_url': u'http://pt.slideshare.net/royfielding/a-little-rest-and-relaxation#btnNext', u'is_article': u'1', u'item_id': u'534183548', u'time_added': u'1390948999', u'resolved_id': u'534183548', u'given_url': u'http://pt.slideshare.net/royfielding/a-little-rest-and-relaxation#btnNext', u'resolved_title': u'A little REST and Relaxation'}, u'1943623': {u'status': u'1', u'is_index': u'0', u'sort_id': 6, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386071745', u'excerpt': u'Early this week, Roy Fieldings wrote a post entitled REST APIs must be hypertext-driven where he criticized the SocialSite REST API (a derivative of the OpenSocial REST API) for violating some constraints of the Representational State Transfer architectural style (aka REST).', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1362', u'given_title': u'Dare Obasanjo aka Carnage4Life - REST API Design: Invent Media Types, Not P', u'resolved_url': u'http://www.25hoursaday.com/weblog/2008/10/24/RESTAPIDesignInventMediaTypesNotProtocolsAndUnderstandTheImportanceOfHyperlinks.aspx', u'is_article': u'1', u'item_id': u'1943623', u'time_added': u'1384737813', u'resolved_id': u'1943623', u'given_url': u'http://www.25hoursaday.com/weblog/2008/10/24/RESTAPIDesignInventMediaTypesNotProtocolsAndUnderstandTheImportanceOfHyperlinks.aspx', u'resolved_title': u'REST API Design: Invent Media Types, Not Protocols and Understand the Importance of Hyperlinks'}, u'269098572': {u'status': u'1', u'is_index': u'0', u'sort_id': 67, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390449968', u'excerpt': u'Using URLs instead of ID references in your APIs is a nice idea. You should do that. It makes it marginally more convenient when writing a client wrapper because you don\u2019t have to embed URL templates. So you can do client.get(response[:person][:url]) instead of client.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'683', u'given_title': u'Getting hyper about hypermedia APIs by David of 37signals', u'resolved_url': u'http://37signals.com/svn/posts/3373-getting-hyper-about-hypermedia-apis', u'is_article': u'1', u'item_id': u'269098572', u'time_added': u'1390391388', u'resolved_id': u'269098572', u'given_url': u'http://37signals.com/svn/posts/3373-getting-hyper-about-hypermedia-apis', u'resolved_title': u'Getting hyper about hypermedia APIs'}, u'368052398': {u'status': u'1', u'is_index': u'0', u'sort_id': 22, u'time_updated': u'1390883965', u'time_favorited': u'1390337502', u'time_read': u'1390354747', u'excerpt': u"Your data model has started to stabilize and you're in a position to create a public API for your web app. You realize it's hard to make significant changes to your API once it's released and want to get as much right as possible up front. Now, the internet has no shortage on opinions on API design.", u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'5245', u'given_title': u'Best Practices for Designing a Pragmatic RESTful API | Vinay Sahni', u'resolved_url': u'http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api', u'is_article': u'0', u'item_id': u'368052398', u'time_added': u'1385437177', u'resolved_id': u'368052398', u'given_url': u'http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api', u'resolved_title': u'Best Practices for Designing a Pragmatic RESTful API'}, u'33162600': {u'status': u'1', u'is_index': u'0', u'sort_id': 36, u'time_updated': u'1390883965', u'time_favorited': u'1390067343', u'time_read': u'1390449715', u'excerpt': u"Recently I've been reading drafts of Rest In Practice: a book that a couple of my colleagues have been working on. Their aim is to explain how to use Restful web services to handle many of the integration problems that enterprises face.", u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'2259', u'given_title': u'', u'resolved_url': u'http://martinfowler.com/articles/richardsonMaturityModel.html', u'is_article': u'1', u'item_id': u'33162600', u'time_added': u'1386541696', u'resolved_id': u'33162600', u'given_url': u'http://martinfowler.com/articles/richardsonMaturityModel.html', u'resolved_title': u'Richardson Maturity Model'}, u'142265473': {u'status': u'1', u'is_index': u'0', u'sort_id': 15, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390148409', u'excerpt': u'In 2007, Steve Jobs announced the iPhone that revolutionized the technology industry and changed the way we work and do business. It is 2012 now and increasingly, more and more websites are offering native iOS and Android clients as front ends to their service.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'3345', u'given_title': u'RESTful API Server \u2013 Doing it the right way (Part 1) | MKBlog', u'resolved_url': u'http://blog.mugunthkumar.com/articles/restful-api-server-doing-it-the-right-way-part-1/', u'is_article': u'1', u'item_id': u'142265473', u'time_added': u'1385238020', u'resolved_id': u'142265473', u'given_url': u'http://blog.mugunthkumar.com/articles/restful-api-server-doing-it-the-right-way-part-1/', u'resolved_title': u'RESTful API Server \u2013 Doing it the right way (Part 1)'}, u'63520269': {u'status': u'1', u'is_index': u'0', u'sort_id': 30, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386467493', u'excerpt': u'I have looked around and found several "skeleton" frameworks. In addition to the answers in my question, there is Tonic, a REST framework I like because it is very lightweight.  I like REST the best for its simplicity, and would like to create an API architecture based on it.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'4471', u'given_title': u'', u'resolved_url': u'http://stackoverflow.com/questions/2001773/understanding-rest-verbs-error-codes-and-authentication', u'is_article': u'0', u'item_id': u'63520269', u'time_added': u'1386424852', u'resolved_id': u'63520269', u'given_url': u'http://stackoverflow.com/questions/2001773/understanding-rest-verbs-error-codes-and-authentication', u'resolved_title': u'Understanding REST: Verbs, error codes, and authentication'}, u'1863591': {u'status': u'1', u'is_index': u'0', u'sort_id': 1, u'time_updated': u'1390883965', u'time_favorited': u'1389913286', u'time_read': u'1389913287', u'excerpt': u'I am getting frustrated by the number of people calling any HTTP-based interface a REST API. Today\u2019s example is the SocialSite REST API. That is RPC. It screams RPC. There is so much coupling on display that it should be given an X rating.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'664', u'given_title': u'REST APIs must be hypertext-driven \xbb Untangled', u'resolved_url': u'http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven', u'is_article': u'1', u'item_id': u'1863591', u'time_added': u'1382925264', u'resolved_id': u'1863591', u'given_url': u'http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven', u'resolved_title': u'REST APIs must be hypertext-driven'}, u'44450712': {u'status': u'1', u'is_index': u'0', u'sort_id': 23, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390308559', u'excerpt': u'Web APIs typically use REST style for communication while moving away from more traditional SOAP web services. Our ProgrammableWeb service directory currently lists around 1500 services which are using REST, and around 360 using SOAP.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'1', u'word_count': u'651', u'given_title': u'API Anti-Patterns: How to Avoid Common REST Mistakes', u'resolved_url': u'http://blog.programmableweb.com/2010/08/13/api-anti-patterns-how-to-avoid-common-rest-mistakes/', u'is_article': u'1', u'item_id': u'44450712', u'time_added': u'1385437192', u'resolved_id': u'44450712', u'given_url': u'http://blog.programmableweb.com/2010/08/13/api-anti-patterns-how-to-avoid-common-rest-mistakes/', u'resolved_title': u'API Anti-Patterns: How to Avoid Common REST Mistakes'}, u'147740496': {u'status': u'1', u'is_index': u'0', u'sort_id': 5, u'time_updated': u'1390883965', u'time_favorited': u'1385178388', u'time_read': u'1385178422', u'excerpt': u'Everyone says they have a REST (or RESTful or REST-like) API. Twitter does, Facebook does, as does Twilio and Gowalla and even Google. However, by the actual, original definition, none of them are truly RESTful. But that\u2019s OK, because your API shouldn\u2019t be either.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1294', u'given_title': u'', u'resolved_url': u'http://www.intridea.com/blog/2010/4/29/rest-isnt-what-you-think-it-is', u'is_article': u'1', u'item_id': u'147740496', u'time_added': u'1384737567', u'resolved_id': u'147740496', u'given_url': u'http://www.intridea.com/blog/2010/4/29/rest-isnt-what-you-think-it-is', u'resolved_title': u"REST isn't what you think it is, and that's OK"}, u'35463485': {u'status': u'1', u'is_index': u'0', u'sort_id': 17, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386432259', u'excerpt': u'In my attempt to redesign an existing application using REST architectural style, I came across a problem which I would like to term as "Mediatype Explosion". However, I am not sure if this is really a problem or an inherent benefit of REST. To explain what I mean, take the following example', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'280', u'given_title': u'REST Media type explosion - Stack Overflow', u'resolved_url': u'http://stackoverflow.com/questions/880881/rest-media-type-explosion', u'is_article': u'1', u'item_id': u'35463485', u'time_added': u'1385238309', u'resolved_id': u'35463485', u'given_url': u'http://stackoverflow.com/questions/880881/rest-media-type-explosion', u'resolved_title': u'REST Media type explosion'}, u'66512546': {u'status': u'1', u'is_index': u'0', u'sort_id': 8, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386128357', u'excerpt': u"this is a follow up to my Registering A Media Type, Part I post from 2010-12.  i got good news last week. my application to the IANA for registration of my Maze+XML media type was approved! yep, it's official; i am 'up on the big board'[grin]! the details completing the registation was very simple.", u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'862', u'given_title': u'', u'resolved_url': u'http://www.amundsen.com/blog/archives/1091', u'is_article': u'1', u'item_id': u'66512546', u'time_added': u'1384738249', u'resolved_id': u'66512546', u'given_url': u'http://amundsen.com/blog/archives/1091', u'resolved_title': u'mca blog [Maze+XML media type approved!]'}, u'461388592': {u'status': u'1', u'is_index': u'0', u'sort_id': 0, u'time_updated': u'1390883965', u'time_favorited': u'1385931329', u'time_read': u'1385931330', u'excerpt': u'A brilliant, undiscovered app developer just logged into the front page for your API program (please don\u2019t tell me you just emailed a PDF), and made their first successful call. They\u2019re frustrated, feeling like they don\u2019t understand what just happened, and generally just exhausted.', u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1475', u'given_title': u'Why no one wants to use your API', u'resolved_url': u'http://apiux.com/2013/10/18/why-no-one-wants-to-use-your-api/', u'is_article': u'1', u'item_id': u'461388592', u'time_added': u'1382152593', u'resolved_id': u'461388592', u'given_url': u'http://apiux.com/2013/10/18/why-no-one-wants-to-use-your-api/', u'resolved_title': u'Why no one wants to use your API'}, u'111894399': {u'status': u'1', u'is_index': u'0', u'sort_id': 49, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390607925', u'excerpt': u'This over-long and rambling post summarises my current thoughts on the topic, both as background for that discussion, as well as for review in the wider community.  Developers are used to software versioning; e.g., for every release, you bump an identifier.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'2432', u'given_title': u'', u'resolved_url': u'http://www.mnot.net/blog/2011/10/25/web_api_versioning_smackdown', u'is_article': u'1', u'item_id': u'111894399', u'time_added': u'1389835886', u'resolved_id': u'111894399', u'given_url': u'http://www.mnot.net/blog/2011/10/25/web_api_versioning_smackdown', u'resolved_title': u'mnot\u2019s blog'}, u'81885909': {u'status': u'1', u'is_index': u'0', u'sort_id': 41, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390361680', u'excerpt': u'Web Services are the key point of Integration for different applications belonging to different Platforms, Languages, systems. It wouldn\u2019t be wrong if you call Web-services as the \u201cRendezvous point of the Business\u201d.  I\u2019ve been using HTTP and SOAP since several years new. REST is rather new.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'2235', u'given_title': u'REST vs. SOAP \u2013 The Right WebService', u'resolved_url': u'http://geeknizer.com/rest-vs-soap-using-http-choosing-the-right-webservice-protocol/', u'is_article': u'1', u'item_id': u'81885909', u'time_added': u'1389647240', u'resolved_id': u'81885909', u'given_url': u'http://geeknizer.com/rest-vs-soap-using-http-choosing-the-right-webservice-protocol/', u'resolved_title': u'REST vs. SOAP \u2013 The Right WebService'}, u'349070133': {u'status': u'1', u'is_index': u'0', u'sort_id': 68, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390499958', u'excerpt': u"Add a self-link on RESTful resource.  This suggestion is part of my REST lessons learned series of blog posts. Contrary to previous posts, this advice doesn't originate from a lesson learned the hard way, but is more of a gentle suggestion.", u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'691', u'given_title': u'', u'resolved_url': u'http://blog.ploeh.dk/2013/05/03/rest-lesson-learned-consider-a-self-link-on-all-resources', u'is_article': u'1', u'item_id': u'349070133', u'time_added': u'1390449579', u'resolved_id': u'349070133', u'given_url': u'http://blog.ploeh.dk/2013/05/03/rest-lesson-learned-consider-a-self-link-on-all-resources/', u'resolved_title': u'REST lesson learned: Consider a self link on all resources by Mark Seemann'}, u'32982301': {u'status': u'1', u'is_index': u'0', u'sort_id': 54, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390111181', u'excerpt': u"Update: Comments should be working now.  This is my attempt to summarize an overview of my thinking on RESTful versioning. It's a follow up to Square Peg, REST hole.", u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1762', u'given_title': u'Versioning RESTful Web Resources - A Survey - Stu says stuff', u'resolved_url': u'http://www.stucharlton.com/blog/archives/2010/03/versioning-restful-web-resources---a-survey.html', u'is_article': u'1', u'item_id': u'32982301', u'time_added': u'1390057205', u'resolved_id': u'32982301', u'given_url': u'http://www.stucharlton.com/blog/archives/2010/03/versioning-restful-web-resources---a-survey.html', u'resolved_title': u'Versioning RESTful Web Resources - A Survey'}, u'486602121': {u'status': u'1', u'is_index': u'0', u'sort_id': 10, u'time_updated': u'1390883966', u'time_favorited': u'1386169448', u'time_read': u'1386169449', u'excerpt': u"This question is about optimal REST API design and a problem I'm facing to choose between nested resources and root level collections.  To demonstrate the concept, suppose I have collections City, Business, and Employees. A typical API may be constructed as follows.", u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1903', u'given_title': u'c# - REST API Design: Nested Collection vs. New Root - Stack Overflow', u'resolved_url': u'http://stackoverflow.com/questions/19340488/rest-api-design-nested-collection-vs-new-root', u'is_article': u'0', u'item_id': u'486602121', u'time_added': u'1385219928', u'resolved_id': u'486602121', u'given_url': u'http://stackoverflow.com/questions/19340488/rest-api-design-nested-collection-vs-new-root', u'resolved_title': u'REST API Design: Nested Collection vs. New Root'}, u'86615439': {u'status': u'1', u'is_index': u'0', u'sort_id': 47, u'time_updated': u'1390883965', u'time_favorited': u'1390427114', u'time_read': u'1390427115', u'excerpt': u'HAL is a simple format that gives a consistent and easy way to hyperlink between resources in your API.  Adopting HAL will make your API explorable, and its documentation easily disocverable from within the API itself.', u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1147', u'given_title': u'The Hypertext Application Language', u'resolved_url': u'http://stateless.co/hal_specification.html', u'is_article': u'1', u'item_id': u'86615439', u'time_added': u'1389819827', u'resolved_id': u'86615439', u'given_url': u'http://stateless.co/hal_specification.html', u'resolved_title': u'HAL - Hypertext Application Language'}, u'177392167': {u'status': u'0', u'is_index': u'0', u'sort_id': 46, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'This section describes how to use Oracle Application Express Listener RESTful Application Programming Interfaces (APIs) to expose data stored in an Oracle database.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'5006', u'given_title': u'RESTful APIs and Resource Templates', u'resolved_url': u'http://docs.oracle.com/cd/E21611_01/doc.11/e21058/rest_api.htm#BGBDFDHJ', u'is_article': u'0', u'item_id': u'177392167', u'time_added': u'1389787443', u'resolved_id': u'177392167', u'given_url': u'http://docs.oracle.com/cd/E21611_01/doc.11/e21058/rest_api.htm', u'resolved_title': u'3 RESTful APIs and Resource Templates'}, u'92161420': {u'status': u'0', u'is_index': u'1', u'sort_id': 71, u'time_updated': u'1390966734', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'Timelines are collections of Tweets, ordered with the most recent first.  Tweets are the atomic building blocks of Twitter, 140-character status updates with additional associated metadata. People tweet for a variety of reasons about a multitude of topics.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'3823', u'given_title': u'The Twitter REST API | Twitter Developers', u'resolved_url': u'https://dev.twitter.com/docs/api', u'is_article': u'1', u'item_id': u'92161420', u'time_added': u'1390966677', u'resolved_id': u'92161420', u'given_url': u'https://dev.twitter.com/docs/api', u'resolved_title': u'REST API Resources'}, u'166070929': {u'status': u'0', u'is_index': u'0', u'sort_id': 18, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'Presentation Transcript JPoint \xa0REST: From GET to HATEOAS \u2026 \xa0or \xa0how \xa0to \xa0create \xa0RESTful \xa0APIs \xa0 2 Who am I? ~ \xa0just \xa0some \xa0java \xa0guy \xa0~ \xa0 Jos Dirksen Interests Books Architect \xa0@ \xa0JPoint \xa0 \u2022\u202f Java \xa0& \xa0Scala \xa0 Shameless \xa0self \xa0promotion: \xa0 \u2022\u202f REST, \xa0WS-\xad\u2010* \xa0', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'4661', u'given_title': u'REST: From GET to HATEOAS', u'resolved_url': u'http://www.slideshare.net/josdirksen/rest-from-get-to-hateoas', u'is_article': u'1', u'item_id': u'166070929', u'time_added': u'1385238479', u'resolved_id': u'166070929', u'given_url': u'http://www.slideshare.net/josdirksen/rest-from-get-to-hateoas', u'resolved_title': u'REST: From GET to HATEOAS'}, u'490920008': {u'status': u'1', u'is_index': u'0', u'sort_id': 24, u'time_updated': u'1390883966', u'time_favorited': u'1386172363', u'time_read': u'1386172364', u'excerpt': u'Really, nobody takes your website serious anymore if you don\u2019t offer an\xa0API. And\xa0that\u2019s what everybody did: they got themselves a\xa0nice API. An enormous amount of money and energy is wasted on developing APIs that are hard to create and even harder to use.', u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1818', u'given_title': u'The lie of the API | Ruben Verborgh', u'resolved_url': u'http://ruben.verborgh.org/blog/2013/11/29/the-lie-of-the-api/', u'is_article': u'1', u'item_id': u'490920008', u'time_added': u'1385755931', u'resolved_id': u'490920008', u'given_url': u'http://ruben.verborgh.org/blog/2013/11/29/the-lie-of-the-api/', u'resolved_title': u'The lie of the API'}, u'338051716': {u'status': u'1', u'is_index': u'0', u'sort_id': 40, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1389316273', u'excerpt': u'Translations of the following dialog available in\xa0Japanese,\xa0French,\xa0Vietnamese,\xa0Italian,\xa0Spanish,Portuguese, and\xa0Chinese. Huge thanks to\xa0YAMAMOTO Yohei,\xa0Karl Dubost,\xa0jishin,\xa0Barbz,\xa0Tordek,\xa0Edgard Arakaki,\xa0keven lw, respectively.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1913', u'given_title': u'', u'resolved_url': u'http://www.looah.com/source/view/2284', u'is_article': u'1', u'item_id': u'338051716', u'time_added': u'1389316239', u'resolved_id': u'338051716', u'given_url': u'http://www.looah.com/source/view/2284', u'resolved_title': u'How I Explained REST to My Wife'}, u'207256232': {u'status': u'1', u'is_index': u'0', u'sort_id': 37, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390175287', u'excerpt': u'0596801688,0596529260,032154420X,1449306578,0596158041,1449308929,0321200683,1449311601,0137012519,0321826620,1565925092,1449360726,0321834577,1782161821,0321127420,1449310508,1934356921,1449356265,0321601912,144930351X,0321125215,0596517335,1449358063,1430257822,0596806752,059652112X,0596517742,0', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'11', u'given_title': u'', u'resolved_url': u'http://www.amazon.com/gp/product/0596805829', u'is_article': u'0', u'item_id': u'207256232', u'time_added': u'1386541706', u'resolved_id': u'55346602', u'given_url': u'http://www.amazon.com/gp/product/0596805829?ie=UTF8&tag=martinfowlerc-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0596805829', u'resolved_title': u'REST in Practice: Hypermedia and Systems Architecture [Paperback]'}, u'132973586': {u'status': u'1', u'is_index': u'0', u'sort_id': 9, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386541361', u'excerpt': u'What you choose to include in any given representation of a resource is up to you.  Your case of the the covers referenced separately is merely the creation of a parent resource (comic book) whose child resources (covers) may be cross-referenced.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'700', u'given_title': u'api - REST Complex/Composite/Nested Resources - Stack Overflow', u'resolved_url': u'http://stackoverflow.com/questions/7104578/rest-complex-composite-nested-resources', u'is_article': u'1', u'item_id': u'132973586', u'time_added': u'1385219919', u'resolved_id': u'132973586', u'given_url': u'http://stackoverflow.com/questions/7104578/rest-complex-composite-nested-resources', u'resolved_title': u'REST Complex/Composite/Nested Resources'}, u'206513674': {u'status': u'1', u'is_index': u'0', u'sort_id': 42, u'time_updated': u'1390883965', u'time_favorited': u'1390426587', u'time_read': u'1390426588', u'excerpt': u'I am currently working on a REST API, and the question was raised, how are, and how should, REST APIs be versioned? Here are the results of my research.  It seems that there are a number of people recommending using Content-Negotiation (the HTTP \u201cAccept:\u201d header) for API versioning.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'400', u'given_title': u'How are REST APIs versioned? | Lexical Scope', u'resolved_url': u'http://www.lexicalscope.com/blog/2012/03/12/how-are-rest-apis-versioned/', u'is_article': u'1', u'item_id': u'206513674', u'time_added': u'1389663786', u'resolved_id': u'206513674', u'given_url': u'http://www.lexicalscope.com/blog/2012/03/12/how-are-rest-apis-versioned/', u'resolved_title': u'How are REST APIs versioned?'}, u'140670777': {u'status': u'1', u'is_index': u'0', u'sort_id': 43, u'time_updated': u'1390883965', u'time_favorited': u'1390358699', u'time_read': u'1390358708', u'excerpt': u'Yep. Sorry to have to inform you. REST is totally over. The cool kids are moving on. We\'re building "Hypermedia APIs" now. Such is life.  Way back in the day, COINTELPRO was at the forefront of America\'s fight against "subersive" organizations and individuals.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'742', u'given_title': u'', u'resolved_url': u'http://blog.steveklabnik.com/posts/2012-02-23-rest-is-over', u'is_article': u'1', u'item_id': u'140670777', u'time_added': u'1389742035', u'resolved_id': u'140670777', u'given_url': u'http://blog.steveklabnik.com/posts/2012-02-23-rest-is-over', u'resolved_title': u'REST is'}, u'381872596': {u'status': u'1', u'is_index': u'0', u'sort_id': 62, u'time_updated': u'1390883965', u'time_favorited': u'1390486839', u'time_read': u'1390493710', u'excerpt': u'You are now in FULL VIEW       by | NOTICE: The next QCon is in London Mar 3-17, Join us!                        Sponsored Links', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'19', u'given_title': u'Building Hypermedia APIs with HTML', u'resolved_url': u'http://www.infoq.com/presentations/web-api-html', u'is_article': u'0', u'item_id': u'381872596', u'time_added': u'1390315661', u'resolved_id': u'381872596', u'given_url': u'http://www.infoq.com/presentations/web-api-html', u'resolved_title': u'Building Hypermedia APIs with HTML'}, u'81765662': {u'status': u'1', u'is_index': u'0', u'sort_id': 19, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390307945', u'excerpt': u'Written by Steve Klabnik.  Every time someone mentions RESTful web services, there\u2019s always that one person that has to chime in: \u201cThat\u2019s not really RESTful, it\u2019s just kinda RESTful.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1322', u'given_title': u'Haters gonna HATEOAS \u2014 Timeless', u'resolved_url': u'http://timelessrepo.com/haters-gonna-hateoas', u'is_article': u'1', u'item_id': u'81765662', u'time_added': u'1385238508', u'resolved_id': u'81765662', u'given_url': u'http://timelessrepo.com/haters-gonna-hateoas', u'resolved_title': u'Haters gonna HATEOAS \u2014 Timeless'}, u'367209836': {u'status': u'1', u'is_index': u'1', u'sort_id': 26, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386645432', u'excerpt': u'REST constraints are design rules that are applied to establish the distinct characteristics of the REST architectural style.  Each constraint is a pre-determined design decision that can have both positive and negative impacts.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'310', u'given_title': u'WhatIsREST.com | REST Constraints', u'resolved_url': u'http://whatisrest.com/rest_constraints/index', u'is_article': u'1', u'item_id': u'367209836', u'time_added': u'1385870334', u'resolved_id': u'367209836', u'given_url': u'http://whatisrest.com/rest_constraints/index', u'resolved_title': u'REST Constraints'}, u'1950194': {u'status': u'1', u'is_index': u'0', u'sort_id': 4, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1384691981', u'excerpt': u"The SocialSite REST API has come under fire recently about it's RESTfullness from Roy Fielding. Roy uses it as an example of systems that claim to be REST but are often very far from it.  It's not too hard to find evidence in the OpenSocial pages to agree with Roy. For example:", u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1099', u'given_title': u'What Makes Good REST?', u'resolved_url': u'http://www.infoq.com/news/2008/10/rest-api', u'is_article': u'1', u'item_id': u'1950194', u'time_added': u'1383018963', u'resolved_id': u'1950194', u'given_url': u'http://www.infoq.com/news/2008/10/rest-api', u'resolved_title': u'What Makes Good REST?'}, u'319588918': {u'status': u'1', u'is_index': u'0', u'sort_id': 11, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386433081', u'excerpt': u'In the two years since Backbone.js was released, thick-client JavaScript apps have dramatically changed how developers build APIs.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'2250', u'given_title': u'Suggested REST API Practices (2013) :: madhatted.com', u'resolved_url': u'http://madhatted.com/2013/3/19/suggested-rest-api-practices', u'is_article': u'1', u'item_id': u'319588918', u'time_added': u'1385219964', u'resolved_id': u'319588918', u'given_url': u'http://madhatted.com/2013/3/19/suggested-rest-api-practices', u'resolved_title': u'Suggested REST API Practices (2013)'}, u'74250013': {u'status': u'0', u'is_index': u'0', u'sort_id': 12, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'9,075 views A simple case study around HATEOAS (Hypermedia as the engine of application state), an essential constraint of the REST architecture style  A simple case study around HATEOAS (Hypermedia as the engine of application state), an essential constraint of the REST architecture style', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'43', u'given_title': u'Why HATEOAS', u'resolved_url': u'http://www.slideshare.net/trilancer/why-hateoas-1547275', u'is_article': u'0', u'item_id': u'74250013', u'time_added': u'1385220048', u'resolved_id': u'74250013', u'given_url': u'http://www.slideshare.net/trilancer/why-hateoas-1547275', u'resolved_title': u'Why HATEOAS'}, u'260725072': {u'status': u'1', u'is_index': u'0', u'sort_id': 57, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390138683', u'excerpt': u'One of the most vexing problems that still seems to be facing people when I talk to them about HTTP APIs is how to handle versioning and extensibility \u2014 i.e., how they evolve.  So, I was quite interested to come across\xa0Tom Preston-Werner\u2019s effort to define Semantic Versioning.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1844', u'given_title': u'', u'resolved_url': u'http://www.mnot.net/blog/2012/12/04/api-evolution', u'is_article': u'1', u'item_id': u'260725072', u'time_added': u'1390136292', u'resolved_id': u'260725072', u'given_url': u'http://www.mnot.net/blog/2012/12/04/api-evolution', u'resolved_title': u'mnot\u2019s blog'}, u'73063450': {u'status': u'1', u'is_index': u'0', u'sort_id': 29, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390354931', u'excerpt': u'Content negotiation is a mechanism defined in the HTTP specification that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'552', u'given_title': u'', u'resolved_url': u'http://en.wikipedia.org/wiki/Content_negotiation', u'is_article': u'1', u'item_id': u'73063450', u'time_added': u'1386172224', u'resolved_id': u'73063450', u'given_url': u'http://en.wikipedia.org/wiki/Content_negotiation', u'resolved_title': u'Content negotiation'}, u'3438728': {u'status': u'0', u'is_index': u'0', u'sort_id': 51, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'0', u'given_title': u'www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf', u'resolved_url': u'http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf', u'is_article': u'0', u'item_id': u'3438728', u'time_added': u'1389894835', u'resolved_id': u'3438728', u'given_url': u'http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf', u'resolved_title': u''}, u'320899519': {u'status': u'1', u'is_index': u'0', u'sort_id': 35, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386679452', u'excerpt': u"Choosing an API versioning strategy can be difficult. There are many approaches and each come with their own pros and cons. Two of the most common practices are to version in the URL or with headers. For Heroku's public API we decided to version with the Accept header.", u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'445', u'given_title': u'Versioning Your API | dane.heroku.com', u'resolved_url': u'http://dane.heroku.com/2012/08/versioning-your-api', u'is_article': u'1', u'item_id': u'320899519', u'time_added': u'1386433068', u'resolved_id': u'320899519', u'given_url': u'http://dane.heroku.com/2012/08/versioning-your-api', u'resolved_title': u'Versioning Your API'}, u'358111555': {u'status': u'1', u'is_index': u'0', u'sort_id': 56, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390135977', u'excerpt': u'A common part of HTTP-based APIs is telling the client that something has gone wrong. Most APIs do this in some fashion, whether they call it a \u201cFault\u201d (very SOAP-y), \u201cError\u201d or whatever.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'677', u'given_title': u'mnot\u2019s blog: Indicating Problems in HTTP APIs', u'resolved_url': u'http://www.mnot.net/blog/2013/05/15/http_problem', u'is_article': u'1', u'item_id': u'358111555', u'time_added': u'1390057739', u'resolved_id': u'358111555', u'given_url': u'http://www.mnot.net/blog/2013/05/15/http_problem', u'resolved_title': u'mnot\u2019s blog'}, u'527171220': {u'status': u'1', u'is_index': u'0', u'sort_id': 60, u'time_updated': u'1390883966', u'time_favorited': u'0', u'time_read': u'1390306958', u'excerpt': u'In addition to the loss of self-descriptiveness there is another problem with generic media types that is not so obvious.  Let\u2019s think about the problem from the point of view of someone that needs to conduct a change impact analysis.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'274', u'given_title': u'Generic vs. Specific Media Types and Evolution', u'resolved_url': u'http://www.jalg.net/2010/10/generic-vs-specific-media-types-and-evolution/', u'is_article': u'1', u'item_id': u'527171220', u'time_added': u'1390170080', u'resolved_id': u'527171220', u'given_url': u'http://www.jalg.net/2010/10/generic-vs-specific-media-types-and-evolution/', u'resolved_title': u'Generic vs. Specific Media Types and Evolution'}, u'532905220': {u'status': u'1', u'is_index': u'0', u'sort_id': 69, u'time_updated': u'1390883966', u'time_favorited': u'0', u'time_read': u'1390825622', u'excerpt': u'This is a work in progress. It "works for me" at www.apiregistro.com.br, but I cannot warranty that it fully "works everywhere" yet.  Nested resources are needed for full REST URL structure, if one resource lives inside another.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'304', u'given_title': u'', u'resolved_url': u'https://github.com/alanjds/drf-nested-routers', u'is_article': u'1', u'item_id': u'532905220', u'time_added': u'1390821663', u'resolved_id': u'532905220', u'given_url': u'https://github.com/alanjds/drf-nested-routers', u'resolved_title': u'alanjds/drf-nested-routers \xb7 GitHub'}, u'39272194': {u'status': u'1', u'is_index': u'0', u'sort_id': 28, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390174932', u'excerpt': u'REST stands for Representational State Transfer. (It is sometimes spelled "ReST".) It relies on a stateless, client-server, cacheable communications protocol -- and in virtually all cases, the HTTP protocol is used.  REST is an architecture style for designing networked applications.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'219', u'given_title': u'Learn REST: A Tutorial: 1. What is REST?', u'resolved_url': u'http://rest.elkstein.org/2008/02/what-is-rest.html', u'is_article': u'1', u'item_id': u'39272194', u'time_added': u'1386032247', u'resolved_id': u'39272194', u'given_url': u'http://rest.elkstein.org/2008/02/what-is-rest.html', u'resolved_title': u'1. What is REST?'}, u'24059877': {u'status': u'1', u'is_index': u'0', u'sort_id': 39, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1389316192', u'excerpt': u'Esposa: Quem \xe9 Roy Fielding?  Ryan: \xc9 um cara. Ele \xe9 esperto.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'2312', u'given_title': u'Tradu\xe7\xe3o de \u201cHow I Explained REST to My Wife\u201d | Dist\xf3pico', u'resolved_url': u'http://distopico.wordpress.com/traducao-de-how-i-explained-rest-to-my-wife/', u'is_article': u'1', u'item_id': u'24059877', u'time_added': u'1389183102', u'resolved_id': u'24059877', u'given_url': u'http://distopico.wordpress.com/traducao-de-how-i-explained-rest-to-my-wife/', u'resolved_title': u'Tradu\xe7\xe3o de \u201cHow I Explained REST to My Wife\u201d'}, u'211110994': {u'status': u'1', u'is_index': u'0', u'sort_id': 27, u'time_updated': u'1390883965', u'time_favorited': u'1390784287', u'time_read': u'1390784310', u'excerpt': u'Share your videos with friends, family, and the world', u'has_image': u'1', u'favorite': u'1', u'has_video': u'2', u'word_count': u'0', u'given_title': u'HATEOAS 101: Opinionated Introduction to a REST API Style - Webcast - YouTu', u'resolved_url': u'http://www.youtube.com/watch?v=6UXc71O7htc', u'is_article': u'0', u'item_id': u'211110994', u'time_added': u'1386032050', u'resolved_id': u'211110994', u'given_url': u'http://www.youtube.com/watch?v=6UXc71O7htc', u'resolved_title': u''}, u'23066306': {u'status': u'0', u'is_index': u'0', u'sort_id': 20, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'0', u'given_title': u'lcsd05.cs.tamu.edu/slides/keynote.pdf', u'resolved_url': u'http://lcsd05.cs.tamu.edu/slides/keynote.pdf', u'is_article': u'0', u'item_id': u'23066306', u'time_added': u'1385298412', u'resolved_id': u'23066306', u'given_url': u'http://lcsd05.cs.tamu.edu/slides/keynote.pdf', u'resolved_title': u''}, u'18778019': {u'status': u'1', u'is_index': u'0', u'sort_id': 7, u'time_updated': u'1390883965', u'time_favorited': u'1374955337', u'time_read': u'1385934124', u'excerpt': u'Are there any known howtos or best practices for web service REST API versioning?  I have noticed that AWS does versioning by the URL of the endpoint. Is this the best way?', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'2055', u'given_title': u'rest - Best practices for API versioning? - Stack Overflow', u'resolved_url': u'http://stackoverflow.com/questions/389169/best-practices-for-api-versioning', u'is_article': u'0', u'item_id': u'18778019', u'time_added': u'1384738071', u'resolved_id': u'18778019', u'given_url': u'http://stackoverflow.com/questions/389169/best-practices-for-api-versioning', u'resolved_title': u'Best practices for API versioning? [closed]'}, u'380448860': {u'status': u'1', u'is_index': u'0', u'sort_id': 16, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1386541614', u'excerpt': u'Over the next several blog posts, we\u2019d like to discover what hypermedia as the engine of application state, or HATEOAS (\u201cHay-dee-us\u201d), means.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'618', u'given_title': u'API Design: Ruminating Over REST | Apigee Blog', u'resolved_url': u'https://blog.apigee.com/detail/api_design_ruminating_over_rest', u'is_article': u'1', u'item_id': u'380448860', u'time_added': u'1385238175', u'resolved_id': u'380448860', u'given_url': u'https://blog.apigee.com/detail/api_design_ruminating_over_rest', u'resolved_title': u'API Design: Ruminating Over REST'}, u'190690590': {u'status': u'1', u'is_index': u'0', u'sort_id': 45, u'time_updated': u'1390883965', u'time_favorited': u'1390190085', u'time_read': u'1390177194', u'excerpt': u'A RESTful API needs to have one and exactly one entry point. The URL of the entry point needs to be communicated to API users so that they can find the API.  Technically speaking, the entry point can be seen as a singleton resource that exist outside any collection.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'629', u'given_title': u'URLs', u'resolved_url': u'http://restful-api-design.readthedocs.org/en/latest/urls.html', u'is_article': u'1', u'item_id': u'190690590', u'time_added': u'1389787421', u'resolved_id': u'190690590', u'given_url': u'https://restful-api-design.readthedocs.org/en/latest/urls.html', u'resolved_title': u'URLs\xb6'}, u'524257621': {u'status': u'1', u'is_index': u'0', u'sort_id': 48, u'time_updated': u'1390883966', u'time_favorited': u'1389836102', u'time_read': u'1389836103', u'excerpt': u'Once more I have found myself deeply engaged in a discussion about REST on the api-craft mailing list (https://groups.google.com/forum/#!topic/api-craft/ZxnLD6q6w7w). This time it started with the question "How do I sell the benefits of hypermedia".', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'1757', u'given_title': u'SOA Bits and Ramblings: Selling the benefits of hypermedia in APIs', u'resolved_url': u'http://soabits.blogspot.dk/2013/12/selling-benefits-of-hypermedia.html', u'is_article': u'1', u'item_id': u'524257621', u'time_added': u'1389819863', u'resolved_id': u'524257621', u'given_url': u'http://soabits.blogspot.dk/2013/12/selling-benefits-of-hypermedia.html', u'resolved_title': u'Selling the benefits of hypermedia in APIs'}, u'25965349': {u'status': u'1', u'is_index': u'1', u'sort_id': 59, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390307347', u'excerpt': u'Semantic Versioning 2.0.0 Summary Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards-compatible manner, and PATCH version when you make backwards-compatible bug fixes.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'2062', u'given_title': u'', u'resolved_url': u'http://semver.org/', u'is_article': u'0', u'item_id': u'25965349', u'time_added': u'1390137714', u'resolved_id': u'25965349', u'given_url': u'http://semver.org/', u'resolved_title': u'Semantic Versioning 2.0.0'}, u'487313233': {u'status': u'1', u'is_index': u'0', u'sort_id': 21, u'time_updated': u'1390883966', u'time_favorited': u'1387464230', u'time_read': u'1387464231', u'excerpt': u'There is a war coming soon. The arms merchants of the cloud and a new wave of developers armed with APIs are going to cause massive technology disruption. And APIs are the ammunition fueling this change.', u'has_image': u'1', u'favorite': u'1', u'has_video': u'0', u'word_count': u'866', u'given_title': u'Arm yourself: The API wars are coming', u'resolved_url': u'http://gigaom.com/2013/11/24/arm-yourself-the-api-wars-are-coming/', u'is_article': u'1', u'item_id': u'487313233', u'time_added': u'1385336319', u'resolved_id': u'487313233', u'given_url': u'http://gigaom.com/2013/11/24/arm-yourself-the-api-wars-are-coming/', u'resolved_title': u'Arm yourself: The API wars are coming'}, u'526342689': {u'status': u'1', u'is_index': u'0', u'sort_id': 53, u'time_updated': u'1390883966', u'time_favorited': u'0', u'time_read': u'1390428049', u'excerpt': u'In my ongoing conversations with JJ Dubray, he has often made the point that "REST couples identity and access together in a terrible way". When pressed to explain, he provided the following example. Assume that there is a Resource identified by "/customers/1234".', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1140', u'given_title': u'The Wisdom of Ganesh: Does REST Need Versioning?', u'resolved_url': u'http://wisdomofganesh.blogspot.com.br/2010/06/does-rest-need-versioning.html', u'is_article': u'1', u'item_id': u'526342689', u'time_added': u'1390055645', u'resolved_id': u'526342689', u'given_url': u'http://wisdomofganesh.blogspot.com.br/2010/06/does-rest-need-versioning.html', u'resolved_title': u'Does REST Need Versioning?'}, u'149068109': {u'status': u'1', u'is_index': u'0', u'sort_id': 33, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1387061303', u'excerpt': u'REST is the acronym of Representational State Transfer that represents a set of principles for creating distributed applications in web. It was first introduced and defined by Roy Fielding in the year 2000.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1206', u'given_title': u'', u'resolved_url': u'http://www.prideparrot.com/blog/archive/2011/10/using_http_methods_in_rest', u'is_article': u'1', u'item_id': u'149068109', u'time_added': u'1386424954', u'resolved_id': u'149068109', u'given_url': u'http://www.prideparrot.com/blog/archive/2011/10/using_http_methods_in_rest', u'resolved_title': u'Using HTTP Methods in REST'}, u'78577926': {u'status': u'1', u'is_index': u'0', u'sort_id': 63, u'time_updated': u'1390883965', u'time_favorited': u'1390444113', u'time_read': u'1390444114', u'excerpt': u'RESTful web services are one of our core design patterns. Fielding\u2019s thesis identifies four major constraints that identify a RESTful architecture (statelessness, resource-orientation, uniform interface, hypermedia-driven application state). Many \u201cRESTful\u201d APIs only get 3 out of 4 of these; we', u'has_image': u'1', u'favorite': u'1', u'has_video': u'2', u'word_count': u'0', u'given_title': u'Hypermedia APIs - Jon Moore on Vimeo', u'resolved_url': u'http://vimeo.com/20781278', u'is_article': u'0', u'item_id': u'78577926', u'time_added': u'1390315712', u'resolved_id': u'78577926', u'given_url': u'http://vimeo.com/20781278', u'resolved_title': u'Hypermedia APIs - Jon Moore'}, u'10276519': {u'status': u'0', u'is_index': u'0', u'sort_id': 34, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'0', u'excerpt': u'The content has been bookmarked!  There was an error bookmarking this content! Please retry.', u'has_image': u'1', u'favorite': u'0', u'has_video': u'0', u'word_count': u'705', u'given_title': u'RESTful Enterprise Development', u'resolved_url': u'http://www.infoq.com/presentations/robinson-restful-enterprise', u'is_article': u'0', u'item_id': u'10276519', u'time_added': u'1386432198', u'resolved_id': u'10276519', u'given_url': u'http://www.infoq.com/presentations/robinson-restful-enterprise', u'resolved_title': u'RESTful Enterprise Development'}, 


u'9593545': {u'status': u'1', u'is_index': u'0', u'sort_id': 2, u'time_updated': u'1390883965', u'time_favorited': u'1386540953', u'time_read': u'1386540954', u'excerpt': u'Craig McClanahan, from Sun Microsystems, provided answers as to why existing "REST" APIs don\'t really take advantage of using Hypermedia as the Engine of Application State (HATEOAS) in RESTful services. He cites examples from his recent work in designing the Sun Cloud API to illustrate the benefits.', u'has_image': u'0', u'favorite': u'1', u'has_video': u'0', u'word_count': u'485', u'given_title': u'Advantages Of (Also) Using HATEOAS In RESTFul APIs', u'resolved_url': u'http://www.infoq.com/news/2009/04/hateoas-restful-api-advantages', u'is_article': u'1', u'item_id': u'9593545', u'time_added': u'1383018934', u'resolved_id': u'9593545', u'given_url': u'http://www.infoq.com/news/2009/04/hateoas-restful-api-advantages', u'resolved_title': u'Advantages Of (Also) Using HATEOAS In RESTFul APIs'}, 


u'134742721': {u'status': u'1', u'is_index': u'0', u'sort_id': 64, u'time_updated': u'1390883965', u'time_favorited': u'0', u'time_read': u'1390363112', u'excerpt': u'In software engineering, a resource-oriented architecture (ROA) is a style of software architecture and programming paradigm for designing and developing software in the form of resources with "RESTful" interfaces.', u'has_image': u'0', u'favorite': u'0', u'has_video': u'0', u'word_count': u'1053', u'given_title': u'', u'resolved_url': u'http://en.wikipedia.org/wiki/Resource-oriented_architecture', u'is_article': u'1', u'item_id': u'134742721', u'time_added': u'1390355920', u'resolved_id': u'134742721', u'given_url': u'http://en.wikipedia.org/wiki/Resource-oriented_architecture', u'resolved_title': u'Resource-oriented architecture'}

}, 


u'complete': 0}
